// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"GinTalk/model"
)

func newCommentRelation(db *gorm.DB, opts ...gen.DOOption) commentRelation {
	_commentRelation := commentRelation{}

	_commentRelation.commentRelationDo.UseDB(db, opts...)
	_commentRelation.commentRelationDo.UseModel(&model.CommentRelation{})

	tableName := _commentRelation.commentRelationDo.TableName()
	_commentRelation.ALL = field.NewAsterisk(tableName)
	_commentRelation.PostID = field.NewInt64(tableName, "post_id")
	_commentRelation.CommentID = field.NewInt64(tableName, "comment_id")
	_commentRelation.ParentID = field.NewInt64(tableName, "parent_id")
	_commentRelation.ReplyID = field.NewInt64(tableName, "reply_id")
	_commentRelation.CreateTime = field.NewTime(tableName, "create_time")
	_commentRelation.UpdateTime = field.NewTime(tableName, "update_time")
	_commentRelation.DeleteTime = field.NewInt(tableName, "delete_time")

	_commentRelation.fillFieldMap()

	return _commentRelation
}

// commentRelation 评论关系表：存储评论的层级关系
type commentRelation struct {
	commentRelationDo commentRelationDo

	ALL        field.Asterisk
	PostID     field.Int64 // 评论所属的帖子ID
	CommentID  field.Int64 // 评论ID, 用于关联评论表
	ParentID   field.Int64 // 父评论ID, 0表示一级评论, 其他值表示回复的评论ID
	ReplyID    field.Int64 // 回复的评论的comment_id
	CreateTime field.Time  // 评论关系创建时间，默认当前时间
	UpdateTime field.Time  // 评论关系更新时间，每次更新时自动修改
	DeleteTime field.Int   // 逻辑删除时间，NULL表示未删除

	fieldMap map[string]field.Expr
}

func (c commentRelation) Table(newTableName string) *commentRelation {
	c.commentRelationDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c commentRelation) As(alias string) *commentRelation {
	c.commentRelationDo.DO = *(c.commentRelationDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *commentRelation) updateTableName(table string) *commentRelation {
	c.ALL = field.NewAsterisk(table)
	c.PostID = field.NewInt64(table, "post_id")
	c.CommentID = field.NewInt64(table, "comment_id")
	c.ParentID = field.NewInt64(table, "parent_id")
	c.ReplyID = field.NewInt64(table, "reply_id")
	c.CreateTime = field.NewTime(table, "create_time")
	c.UpdateTime = field.NewTime(table, "update_time")
	c.DeleteTime = field.NewInt(table, "delete_time")

	c.fillFieldMap()

	return c
}

func (c *commentRelation) WithContext(ctx context.Context) ICommentRelationDo {
	return c.commentRelationDo.WithContext(ctx)
}

func (c commentRelation) TableName() string { return c.commentRelationDo.TableName() }

func (c commentRelation) Alias() string { return c.commentRelationDo.Alias() }

func (c commentRelation) Columns(cols ...field.Expr) gen.Columns {
	return c.commentRelationDo.Columns(cols...)
}

func (c *commentRelation) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *commentRelation) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 7)
	c.fieldMap["post_id"] = c.PostID
	c.fieldMap["comment_id"] = c.CommentID
	c.fieldMap["parent_id"] = c.ParentID
	c.fieldMap["reply_id"] = c.ReplyID
	c.fieldMap["create_time"] = c.CreateTime
	c.fieldMap["update_time"] = c.UpdateTime
	c.fieldMap["delete_time"] = c.DeleteTime
}

func (c commentRelation) clone(db *gorm.DB) commentRelation {
	c.commentRelationDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c commentRelation) replaceDB(db *gorm.DB) commentRelation {
	c.commentRelationDo.ReplaceDB(db)
	return c
}

type commentRelationDo struct{ gen.DO }

type ICommentRelationDo interface {
	gen.SubQuery
	Debug() ICommentRelationDo
	WithContext(ctx context.Context) ICommentRelationDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ICommentRelationDo
	WriteDB() ICommentRelationDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ICommentRelationDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ICommentRelationDo
	Not(conds ...gen.Condition) ICommentRelationDo
	Or(conds ...gen.Condition) ICommentRelationDo
	Select(conds ...field.Expr) ICommentRelationDo
	Where(conds ...gen.Condition) ICommentRelationDo
	Order(conds ...field.Expr) ICommentRelationDo
	Distinct(cols ...field.Expr) ICommentRelationDo
	Omit(cols ...field.Expr) ICommentRelationDo
	Join(table schema.Tabler, on ...field.Expr) ICommentRelationDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ICommentRelationDo
	RightJoin(table schema.Tabler, on ...field.Expr) ICommentRelationDo
	Group(cols ...field.Expr) ICommentRelationDo
	Having(conds ...gen.Condition) ICommentRelationDo
	Limit(limit int) ICommentRelationDo
	Offset(offset int) ICommentRelationDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ICommentRelationDo
	Unscoped() ICommentRelationDo
	Create(values ...*model.CommentRelation) error
	CreateInBatches(values []*model.CommentRelation, batchSize int) error
	Save(values ...*model.CommentRelation) error
	First() (*model.CommentRelation, error)
	Take() (*model.CommentRelation, error)
	Last() (*model.CommentRelation, error)
	Find() ([]*model.CommentRelation, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.CommentRelation, err error)
	FindInBatches(result *[]*model.CommentRelation, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.CommentRelation) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ICommentRelationDo
	Assign(attrs ...field.AssignExpr) ICommentRelationDo
	Joins(fields ...field.RelationField) ICommentRelationDo
	Preload(fields ...field.RelationField) ICommentRelationDo
	FirstOrInit() (*model.CommentRelation, error)
	FirstOrCreate() (*model.CommentRelation, error)
	FindByPage(offset int, limit int) (result []*model.CommentRelation, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ICommentRelationDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (c commentRelationDo) Debug() ICommentRelationDo {
	return c.withDO(c.DO.Debug())
}

func (c commentRelationDo) WithContext(ctx context.Context) ICommentRelationDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c commentRelationDo) ReadDB() ICommentRelationDo {
	return c.Clauses(dbresolver.Read)
}

func (c commentRelationDo) WriteDB() ICommentRelationDo {
	return c.Clauses(dbresolver.Write)
}

func (c commentRelationDo) Session(config *gorm.Session) ICommentRelationDo {
	return c.withDO(c.DO.Session(config))
}

func (c commentRelationDo) Clauses(conds ...clause.Expression) ICommentRelationDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c commentRelationDo) Returning(value interface{}, columns ...string) ICommentRelationDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c commentRelationDo) Not(conds ...gen.Condition) ICommentRelationDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c commentRelationDo) Or(conds ...gen.Condition) ICommentRelationDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c commentRelationDo) Select(conds ...field.Expr) ICommentRelationDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c commentRelationDo) Where(conds ...gen.Condition) ICommentRelationDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c commentRelationDo) Order(conds ...field.Expr) ICommentRelationDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c commentRelationDo) Distinct(cols ...field.Expr) ICommentRelationDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c commentRelationDo) Omit(cols ...field.Expr) ICommentRelationDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c commentRelationDo) Join(table schema.Tabler, on ...field.Expr) ICommentRelationDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c commentRelationDo) LeftJoin(table schema.Tabler, on ...field.Expr) ICommentRelationDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c commentRelationDo) RightJoin(table schema.Tabler, on ...field.Expr) ICommentRelationDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c commentRelationDo) Group(cols ...field.Expr) ICommentRelationDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c commentRelationDo) Having(conds ...gen.Condition) ICommentRelationDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c commentRelationDo) Limit(limit int) ICommentRelationDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c commentRelationDo) Offset(offset int) ICommentRelationDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c commentRelationDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ICommentRelationDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c commentRelationDo) Unscoped() ICommentRelationDo {
	return c.withDO(c.DO.Unscoped())
}

func (c commentRelationDo) Create(values ...*model.CommentRelation) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c commentRelationDo) CreateInBatches(values []*model.CommentRelation, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c commentRelationDo) Save(values ...*model.CommentRelation) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c commentRelationDo) First() (*model.CommentRelation, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.CommentRelation), nil
	}
}

func (c commentRelationDo) Take() (*model.CommentRelation, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.CommentRelation), nil
	}
}

func (c commentRelationDo) Last() (*model.CommentRelation, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.CommentRelation), nil
	}
}

func (c commentRelationDo) Find() ([]*model.CommentRelation, error) {
	result, err := c.DO.Find()
	return result.([]*model.CommentRelation), err
}

func (c commentRelationDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.CommentRelation, err error) {
	buf := make([]*model.CommentRelation, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c commentRelationDo) FindInBatches(result *[]*model.CommentRelation, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c commentRelationDo) Attrs(attrs ...field.AssignExpr) ICommentRelationDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c commentRelationDo) Assign(attrs ...field.AssignExpr) ICommentRelationDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c commentRelationDo) Joins(fields ...field.RelationField) ICommentRelationDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c commentRelationDo) Preload(fields ...field.RelationField) ICommentRelationDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c commentRelationDo) FirstOrInit() (*model.CommentRelation, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.CommentRelation), nil
	}
}

func (c commentRelationDo) FirstOrCreate() (*model.CommentRelation, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.CommentRelation), nil
	}
}

func (c commentRelationDo) FindByPage(offset int, limit int) (result []*model.CommentRelation, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c commentRelationDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c commentRelationDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c commentRelationDo) Delete(models ...*model.CommentRelation) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *commentRelationDo) withDO(do gen.Dao) *commentRelationDo {
	c.DO = *do.(*gen.DO)
	return c
}
