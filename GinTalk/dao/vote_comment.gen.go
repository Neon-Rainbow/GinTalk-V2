// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"GinTalk/model"
)

func newVoteComment(db *gorm.DB, opts ...gen.DOOption) voteComment {
	_voteComment := voteComment{}

	_voteComment.voteCommentDo.UseDB(db, opts...)
	_voteComment.voteCommentDo.UseModel(&model.VoteComment{})

	tableName := _voteComment.voteCommentDo.TableName()
	_voteComment.ALL = field.NewAsterisk(tableName)
	_voteComment.ID = field.NewInt64(tableName, "id")
	_voteComment.CommentID = field.NewInt64(tableName, "comment_id")
	_voteComment.UserID = field.NewInt64(tableName, "user_id")
	_voteComment.Vote = field.NewInt32(tableName, "vote")
	_voteComment.CreateTime = field.NewTime(tableName, "create_time")
	_voteComment.UpdateTime = field.NewTime(tableName, "update_time")
	_voteComment.DeleteTime = field.NewInt(tableName, "delete_time")

	_voteComment.fillFieldMap()

	return _voteComment
}

// voteComment 评论投票表：存储用户对评论的投票记录
type voteComment struct {
	voteCommentDo voteCommentDo

	ALL        field.Asterisk
	ID         field.Int64 // 自增主键，唯一标识每条投票记录
	CommentID  field.Int64 // 投票所属的评论ID
	UserID     field.Int64 // 投票用户的用户ID
	Vote       field.Int32 // 投票类型：1-赞
	CreateTime field.Time  // 投票创建时间，默认当前时间
	UpdateTime field.Time  // 投票更新时间，每次更新时自动修改
	DeleteTime field.Int   // 逻辑删除时间，NULL表示未删除

	fieldMap map[string]field.Expr
}

func (v voteComment) Table(newTableName string) *voteComment {
	v.voteCommentDo.UseTable(newTableName)
	return v.updateTableName(newTableName)
}

func (v voteComment) As(alias string) *voteComment {
	v.voteCommentDo.DO = *(v.voteCommentDo.As(alias).(*gen.DO))
	return v.updateTableName(alias)
}

func (v *voteComment) updateTableName(table string) *voteComment {
	v.ALL = field.NewAsterisk(table)
	v.ID = field.NewInt64(table, "id")
	v.CommentID = field.NewInt64(table, "comment_id")
	v.UserID = field.NewInt64(table, "user_id")
	v.Vote = field.NewInt32(table, "vote")
	v.CreateTime = field.NewTime(table, "create_time")
	v.UpdateTime = field.NewTime(table, "update_time")
	v.DeleteTime = field.NewInt(table, "delete_time")

	v.fillFieldMap()

	return v
}

func (v *voteComment) WithContext(ctx context.Context) IVoteCommentDo {
	return v.voteCommentDo.WithContext(ctx)
}

func (v voteComment) TableName() string { return v.voteCommentDo.TableName() }

func (v voteComment) Alias() string { return v.voteCommentDo.Alias() }

func (v voteComment) Columns(cols ...field.Expr) gen.Columns { return v.voteCommentDo.Columns(cols...) }

func (v *voteComment) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := v.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (v *voteComment) fillFieldMap() {
	v.fieldMap = make(map[string]field.Expr, 7)
	v.fieldMap["id"] = v.ID
	v.fieldMap["comment_id"] = v.CommentID
	v.fieldMap["user_id"] = v.UserID
	v.fieldMap["vote"] = v.Vote
	v.fieldMap["create_time"] = v.CreateTime
	v.fieldMap["update_time"] = v.UpdateTime
	v.fieldMap["delete_time"] = v.DeleteTime
}

func (v voteComment) clone(db *gorm.DB) voteComment {
	v.voteCommentDo.ReplaceConnPool(db.Statement.ConnPool)
	return v
}

func (v voteComment) replaceDB(db *gorm.DB) voteComment {
	v.voteCommentDo.ReplaceDB(db)
	return v
}

type voteCommentDo struct{ gen.DO }

type IVoteCommentDo interface {
	gen.SubQuery
	Debug() IVoteCommentDo
	WithContext(ctx context.Context) IVoteCommentDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IVoteCommentDo
	WriteDB() IVoteCommentDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IVoteCommentDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IVoteCommentDo
	Not(conds ...gen.Condition) IVoteCommentDo
	Or(conds ...gen.Condition) IVoteCommentDo
	Select(conds ...field.Expr) IVoteCommentDo
	Where(conds ...gen.Condition) IVoteCommentDo
	Order(conds ...field.Expr) IVoteCommentDo
	Distinct(cols ...field.Expr) IVoteCommentDo
	Omit(cols ...field.Expr) IVoteCommentDo
	Join(table schema.Tabler, on ...field.Expr) IVoteCommentDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IVoteCommentDo
	RightJoin(table schema.Tabler, on ...field.Expr) IVoteCommentDo
	Group(cols ...field.Expr) IVoteCommentDo
	Having(conds ...gen.Condition) IVoteCommentDo
	Limit(limit int) IVoteCommentDo
	Offset(offset int) IVoteCommentDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IVoteCommentDo
	Unscoped() IVoteCommentDo
	Create(values ...*model.VoteComment) error
	CreateInBatches(values []*model.VoteComment, batchSize int) error
	Save(values ...*model.VoteComment) error
	First() (*model.VoteComment, error)
	Take() (*model.VoteComment, error)
	Last() (*model.VoteComment, error)
	Find() ([]*model.VoteComment, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.VoteComment, err error)
	FindInBatches(result *[]*model.VoteComment, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.VoteComment) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IVoteCommentDo
	Assign(attrs ...field.AssignExpr) IVoteCommentDo
	Joins(fields ...field.RelationField) IVoteCommentDo
	Preload(fields ...field.RelationField) IVoteCommentDo
	FirstOrInit() (*model.VoteComment, error)
	FirstOrCreate() (*model.VoteComment, error)
	FindByPage(offset int, limit int) (result []*model.VoteComment, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IVoteCommentDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (v voteCommentDo) Debug() IVoteCommentDo {
	return v.withDO(v.DO.Debug())
}

func (v voteCommentDo) WithContext(ctx context.Context) IVoteCommentDo {
	return v.withDO(v.DO.WithContext(ctx))
}

func (v voteCommentDo) ReadDB() IVoteCommentDo {
	return v.Clauses(dbresolver.Read)
}

func (v voteCommentDo) WriteDB() IVoteCommentDo {
	return v.Clauses(dbresolver.Write)
}

func (v voteCommentDo) Session(config *gorm.Session) IVoteCommentDo {
	return v.withDO(v.DO.Session(config))
}

func (v voteCommentDo) Clauses(conds ...clause.Expression) IVoteCommentDo {
	return v.withDO(v.DO.Clauses(conds...))
}

func (v voteCommentDo) Returning(value interface{}, columns ...string) IVoteCommentDo {
	return v.withDO(v.DO.Returning(value, columns...))
}

func (v voteCommentDo) Not(conds ...gen.Condition) IVoteCommentDo {
	return v.withDO(v.DO.Not(conds...))
}

func (v voteCommentDo) Or(conds ...gen.Condition) IVoteCommentDo {
	return v.withDO(v.DO.Or(conds...))
}

func (v voteCommentDo) Select(conds ...field.Expr) IVoteCommentDo {
	return v.withDO(v.DO.Select(conds...))
}

func (v voteCommentDo) Where(conds ...gen.Condition) IVoteCommentDo {
	return v.withDO(v.DO.Where(conds...))
}

func (v voteCommentDo) Order(conds ...field.Expr) IVoteCommentDo {
	return v.withDO(v.DO.Order(conds...))
}

func (v voteCommentDo) Distinct(cols ...field.Expr) IVoteCommentDo {
	return v.withDO(v.DO.Distinct(cols...))
}

func (v voteCommentDo) Omit(cols ...field.Expr) IVoteCommentDo {
	return v.withDO(v.DO.Omit(cols...))
}

func (v voteCommentDo) Join(table schema.Tabler, on ...field.Expr) IVoteCommentDo {
	return v.withDO(v.DO.Join(table, on...))
}

func (v voteCommentDo) LeftJoin(table schema.Tabler, on ...field.Expr) IVoteCommentDo {
	return v.withDO(v.DO.LeftJoin(table, on...))
}

func (v voteCommentDo) RightJoin(table schema.Tabler, on ...field.Expr) IVoteCommentDo {
	return v.withDO(v.DO.RightJoin(table, on...))
}

func (v voteCommentDo) Group(cols ...field.Expr) IVoteCommentDo {
	return v.withDO(v.DO.Group(cols...))
}

func (v voteCommentDo) Having(conds ...gen.Condition) IVoteCommentDo {
	return v.withDO(v.DO.Having(conds...))
}

func (v voteCommentDo) Limit(limit int) IVoteCommentDo {
	return v.withDO(v.DO.Limit(limit))
}

func (v voteCommentDo) Offset(offset int) IVoteCommentDo {
	return v.withDO(v.DO.Offset(offset))
}

func (v voteCommentDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IVoteCommentDo {
	return v.withDO(v.DO.Scopes(funcs...))
}

func (v voteCommentDo) Unscoped() IVoteCommentDo {
	return v.withDO(v.DO.Unscoped())
}

func (v voteCommentDo) Create(values ...*model.VoteComment) error {
	if len(values) == 0 {
		return nil
	}
	return v.DO.Create(values)
}

func (v voteCommentDo) CreateInBatches(values []*model.VoteComment, batchSize int) error {
	return v.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (v voteCommentDo) Save(values ...*model.VoteComment) error {
	if len(values) == 0 {
		return nil
	}
	return v.DO.Save(values)
}

func (v voteCommentDo) First() (*model.VoteComment, error) {
	if result, err := v.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.VoteComment), nil
	}
}

func (v voteCommentDo) Take() (*model.VoteComment, error) {
	if result, err := v.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.VoteComment), nil
	}
}

func (v voteCommentDo) Last() (*model.VoteComment, error) {
	if result, err := v.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.VoteComment), nil
	}
}

func (v voteCommentDo) Find() ([]*model.VoteComment, error) {
	result, err := v.DO.Find()
	return result.([]*model.VoteComment), err
}

func (v voteCommentDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.VoteComment, err error) {
	buf := make([]*model.VoteComment, 0, batchSize)
	err = v.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (v voteCommentDo) FindInBatches(result *[]*model.VoteComment, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return v.DO.FindInBatches(result, batchSize, fc)
}

func (v voteCommentDo) Attrs(attrs ...field.AssignExpr) IVoteCommentDo {
	return v.withDO(v.DO.Attrs(attrs...))
}

func (v voteCommentDo) Assign(attrs ...field.AssignExpr) IVoteCommentDo {
	return v.withDO(v.DO.Assign(attrs...))
}

func (v voteCommentDo) Joins(fields ...field.RelationField) IVoteCommentDo {
	for _, _f := range fields {
		v = *v.withDO(v.DO.Joins(_f))
	}
	return &v
}

func (v voteCommentDo) Preload(fields ...field.RelationField) IVoteCommentDo {
	for _, _f := range fields {
		v = *v.withDO(v.DO.Preload(_f))
	}
	return &v
}

func (v voteCommentDo) FirstOrInit() (*model.VoteComment, error) {
	if result, err := v.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.VoteComment), nil
	}
}

func (v voteCommentDo) FirstOrCreate() (*model.VoteComment, error) {
	if result, err := v.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.VoteComment), nil
	}
}

func (v voteCommentDo) FindByPage(offset int, limit int) (result []*model.VoteComment, count int64, err error) {
	result, err = v.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = v.Offset(-1).Limit(-1).Count()
	return
}

func (v voteCommentDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = v.Count()
	if err != nil {
		return
	}

	err = v.Offset(offset).Limit(limit).Scan(result)
	return
}

func (v voteCommentDo) Scan(result interface{}) (err error) {
	return v.DO.Scan(result)
}

func (v voteCommentDo) Delete(models ...*model.VoteComment) (result gen.ResultInfo, err error) {
	return v.DO.Delete(models)
}

func (v *voteCommentDo) withDO(do gen.Dao) *voteCommentDo {
	v.DO = *do.(*gen.DO)
	return v
}
