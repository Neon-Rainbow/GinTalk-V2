// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"GinTalk/model"
)

func newContentVote(db *gorm.DB, opts ...gen.DOOption) contentVote {
	_contentVote := contentVote{}

	_contentVote.contentVoteDo.UseDB(db, opts...)
	_contentVote.contentVoteDo.UseModel(&model.ContentVote{})

	tableName := _contentVote.contentVoteDo.TableName()
	_contentVote.ALL = field.NewAsterisk(tableName)
	_contentVote.PostID = field.NewInt64(tableName, "post_id")
	_contentVote.Count = field.NewInt32(tableName, "count")
	_contentVote.Vote = field.NewInt32(tableName, "vote")
	_contentVote.CreateTime = field.NewTime(tableName, "create_time")
	_contentVote.UpdateTime = field.NewTime(tableName, "update_time")
	_contentVote.DeleteTime = field.NewInt(tableName, "delete_time")

	_contentVote.fillFieldMap()

	return _contentVote
}

// contentVote 帖子投票表：存储用户对帖子的投票记录
type contentVote struct {
	contentVoteDo contentVoteDo

	ALL        field.Asterisk
	PostID     field.Int64 // 投票所属的帖子ID
	Count      field.Int32 // 投票总数
	Vote       field.Int32 // 赞数
	CreateTime field.Time  // 投票创建时间，默认当前时间
	UpdateTime field.Time  // 投票更新时间，每次更新时自动修改
	DeleteTime field.Int   // 逻辑删除时间，NULL表示未删除

	fieldMap map[string]field.Expr
}

func (c contentVote) Table(newTableName string) *contentVote {
	c.contentVoteDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c contentVote) As(alias string) *contentVote {
	c.contentVoteDo.DO = *(c.contentVoteDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *contentVote) updateTableName(table string) *contentVote {
	c.ALL = field.NewAsterisk(table)
	c.PostID = field.NewInt64(table, "post_id")
	c.Count = field.NewInt32(table, "count")
	c.Vote = field.NewInt32(table, "vote")
	c.CreateTime = field.NewTime(table, "create_time")
	c.UpdateTime = field.NewTime(table, "update_time")
	c.DeleteTime = field.NewInt(table, "delete_time")

	c.fillFieldMap()

	return c
}

func (c *contentVote) WithContext(ctx context.Context) IContentVoteDo {
	return c.contentVoteDo.WithContext(ctx)
}

func (c contentVote) TableName() string { return c.contentVoteDo.TableName() }

func (c contentVote) Alias() string { return c.contentVoteDo.Alias() }

func (c contentVote) Columns(cols ...field.Expr) gen.Columns { return c.contentVoteDo.Columns(cols...) }

func (c *contentVote) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *contentVote) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 6)
	c.fieldMap["post_id"] = c.PostID
	c.fieldMap["count"] = c.Count
	c.fieldMap["vote"] = c.Vote
	c.fieldMap["create_time"] = c.CreateTime
	c.fieldMap["update_time"] = c.UpdateTime
	c.fieldMap["delete_time"] = c.DeleteTime
}

func (c contentVote) clone(db *gorm.DB) contentVote {
	c.contentVoteDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c contentVote) replaceDB(db *gorm.DB) contentVote {
	c.contentVoteDo.ReplaceDB(db)
	return c
}

type contentVoteDo struct{ gen.DO }

type IContentVoteDo interface {
	gen.SubQuery
	Debug() IContentVoteDo
	WithContext(ctx context.Context) IContentVoteDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IContentVoteDo
	WriteDB() IContentVoteDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IContentVoteDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IContentVoteDo
	Not(conds ...gen.Condition) IContentVoteDo
	Or(conds ...gen.Condition) IContentVoteDo
	Select(conds ...field.Expr) IContentVoteDo
	Where(conds ...gen.Condition) IContentVoteDo
	Order(conds ...field.Expr) IContentVoteDo
	Distinct(cols ...field.Expr) IContentVoteDo
	Omit(cols ...field.Expr) IContentVoteDo
	Join(table schema.Tabler, on ...field.Expr) IContentVoteDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IContentVoteDo
	RightJoin(table schema.Tabler, on ...field.Expr) IContentVoteDo
	Group(cols ...field.Expr) IContentVoteDo
	Having(conds ...gen.Condition) IContentVoteDo
	Limit(limit int) IContentVoteDo
	Offset(offset int) IContentVoteDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IContentVoteDo
	Unscoped() IContentVoteDo
	Create(values ...*model.ContentVote) error
	CreateInBatches(values []*model.ContentVote, batchSize int) error
	Save(values ...*model.ContentVote) error
	First() (*model.ContentVote, error)
	Take() (*model.ContentVote, error)
	Last() (*model.ContentVote, error)
	Find() ([]*model.ContentVote, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ContentVote, err error)
	FindInBatches(result *[]*model.ContentVote, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.ContentVote) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IContentVoteDo
	Assign(attrs ...field.AssignExpr) IContentVoteDo
	Joins(fields ...field.RelationField) IContentVoteDo
	Preload(fields ...field.RelationField) IContentVoteDo
	FirstOrInit() (*model.ContentVote, error)
	FirstOrCreate() (*model.ContentVote, error)
	FindByPage(offset int, limit int) (result []*model.ContentVote, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IContentVoteDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (c contentVoteDo) Debug() IContentVoteDo {
	return c.withDO(c.DO.Debug())
}

func (c contentVoteDo) WithContext(ctx context.Context) IContentVoteDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c contentVoteDo) ReadDB() IContentVoteDo {
	return c.Clauses(dbresolver.Read)
}

func (c contentVoteDo) WriteDB() IContentVoteDo {
	return c.Clauses(dbresolver.Write)
}

func (c contentVoteDo) Session(config *gorm.Session) IContentVoteDo {
	return c.withDO(c.DO.Session(config))
}

func (c contentVoteDo) Clauses(conds ...clause.Expression) IContentVoteDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c contentVoteDo) Returning(value interface{}, columns ...string) IContentVoteDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c contentVoteDo) Not(conds ...gen.Condition) IContentVoteDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c contentVoteDo) Or(conds ...gen.Condition) IContentVoteDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c contentVoteDo) Select(conds ...field.Expr) IContentVoteDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c contentVoteDo) Where(conds ...gen.Condition) IContentVoteDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c contentVoteDo) Order(conds ...field.Expr) IContentVoteDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c contentVoteDo) Distinct(cols ...field.Expr) IContentVoteDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c contentVoteDo) Omit(cols ...field.Expr) IContentVoteDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c contentVoteDo) Join(table schema.Tabler, on ...field.Expr) IContentVoteDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c contentVoteDo) LeftJoin(table schema.Tabler, on ...field.Expr) IContentVoteDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c contentVoteDo) RightJoin(table schema.Tabler, on ...field.Expr) IContentVoteDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c contentVoteDo) Group(cols ...field.Expr) IContentVoteDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c contentVoteDo) Having(conds ...gen.Condition) IContentVoteDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c contentVoteDo) Limit(limit int) IContentVoteDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c contentVoteDo) Offset(offset int) IContentVoteDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c contentVoteDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IContentVoteDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c contentVoteDo) Unscoped() IContentVoteDo {
	return c.withDO(c.DO.Unscoped())
}

func (c contentVoteDo) Create(values ...*model.ContentVote) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c contentVoteDo) CreateInBatches(values []*model.ContentVote, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c contentVoteDo) Save(values ...*model.ContentVote) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c contentVoteDo) First() (*model.ContentVote, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ContentVote), nil
	}
}

func (c contentVoteDo) Take() (*model.ContentVote, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ContentVote), nil
	}
}

func (c contentVoteDo) Last() (*model.ContentVote, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ContentVote), nil
	}
}

func (c contentVoteDo) Find() ([]*model.ContentVote, error) {
	result, err := c.DO.Find()
	return result.([]*model.ContentVote), err
}

func (c contentVoteDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ContentVote, err error) {
	buf := make([]*model.ContentVote, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c contentVoteDo) FindInBatches(result *[]*model.ContentVote, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c contentVoteDo) Attrs(attrs ...field.AssignExpr) IContentVoteDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c contentVoteDo) Assign(attrs ...field.AssignExpr) IContentVoteDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c contentVoteDo) Joins(fields ...field.RelationField) IContentVoteDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c contentVoteDo) Preload(fields ...field.RelationField) IContentVoteDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c contentVoteDo) FirstOrInit() (*model.ContentVote, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ContentVote), nil
	}
}

func (c contentVoteDo) FirstOrCreate() (*model.ContentVote, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ContentVote), nil
	}
}

func (c contentVoteDo) FindByPage(offset int, limit int) (result []*model.ContentVote, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c contentVoteDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c contentVoteDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c contentVoteDo) Delete(models ...*model.ContentVote) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *contentVoteDo) withDO(do gen.Dao) *contentVoteDo {
	c.DO = *do.(*gen.DO)
	return c
}
